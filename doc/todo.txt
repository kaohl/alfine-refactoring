[TODO]
  Should `Supply.iterator()` and `Supply.iterator(Random)` depend on `shuffle()`?.

[TODO][DONE]
  1. Make sure we can restore refactorings from ID and argmap.

  2. Serialize opportunities to file as (ID, ARGMAP)-pairs (generate cache in workspace
     directory if option `prepare` is specified). (Or store cache outside of workspace!)

  3. Read opportunities from file and select random refactorings by first considering number of available
     refactorings. (Compact extract method refactorings and weigh probabilities in proportion to the number
     of opportunities generated by the method. Let the user select technique (i.e., random method or random
     interval in method).)

  4. Update cache files dynamically when we know if a refactoring can be successfully applied.
     (Remove from cache if it can not be applied! (this will only indirectly affect reproducibility:
     the user can still store diff-files to reproduce a refactoring!)

  Note: The user must first "prepare" the workspace copy it to a secure location.
        The prepared workspace is then restored before each refactoring experiment.
        The workspace is thus set up once and the cache is generated once and then
        improved dynamically by removing invalid transformations.

[TODO]
  Produce a static file containing all refactoring opportunities in the
  specified project so that we only have to generate opportunities once
  per project. The refactoring framework should create and print the file
  unless the specified file on the command line does not exists.

  Each refactoring opportunity visitor should produce a set of eclipse source
  handles that can be converted into refactoring opportunities.

[TODO]
  Manage output. Make it possible to toggle output from different parts of the
  refactoring process.

[TODO]
  Consider if we should prevent opportunities from being selected more than once.
  Because the framework is restarted between each refactoring we would have to
  track used refactorings in a file between runs. (We can let the `Supply` know
  about the file and exclude any opportunities that have already been tried so
  that the supplier only contains untried opportunities.)

[TODO]
  Add and propagate seeds specified on the framework command-line. Use one seed
  parameter for sorting and another for selection.

[TODO]
  Extract method refactoring should sort all opportunities by interval length
  and then draw a random interval length and a random opportunity of that length.
